Requisitos:

- En este proyecto se debe hacer una API con todos los endpoints necesarios para que la aplicaci√≥n que se quiere hacer funcione.
    Endpoints:

- Debe tener al menos 2 CRUDs, recomendable uno de usuario y otro del modelo principal de la aplicaci√≥n. 
    CRUDs:

El proyecto puede tener todas las tablas que hagan falta, pero se pueden rellenar con datos predefinidos.
    Tablas:

- Lo recomendable es centrarse en una cosa espec√≠fica, como una web dedicada a la gesti√≥n de elementos o a clientes.
    Gestiones:

- La web tiene que usar jwt como sistema de autenticaci√≥n de usuarios, para poder proteger ciertas rutas. 
Se pueden hacer distintos roles de usuario, pero no es obligatorio.
    JWT y rutas protegidas
    Roles de usuario:
        1. Usuario normal, cliente de un banco
        2. Usuario administrador √∫nico. Gestiona usuarios.


Instalar las siguientes dependencias:

    "bcryptjs": "^3.0.2",
    "cors": "^2.8.5",
    "dotenv": "^16.5.0",
    "express": "^5.1.0",
    "express-session": "^1.18.1",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.14.0",
    "pug": "^3.0.3",
    "sequelize": "^6.37.7"
    "jest": "^29.7.0",
    "nodemon": "^3.1.9"
    "cookie-parser": "^1.4.7",
    "express-validator": "^7.2.1",

En package.json, a√±adir la linea:
{
  "name": "finzen",
  "version": "1.0.0",
  "description": "Proyecto individual de contabilidad personal y objetivos de ahorro",
  "main": "src/index.js",
  "type": "module",

  y

"scripts": {
    "start": "nodemon --legacy-watch src/index.js",

MARTES 22 abril 2025 
inicio el archivo history.txt en la carpeta /ignore para que git no lo suba al repo

Le pido a chatgpt que me genere las definiciones Sequelize en formato ES Modules, con un archivo separado por modelo y las relaciones establecidas.
    Hay que pedirle que genere en el modelo ES Modules para que use import/export y que no genere campos para control timestamp, 
        o decirle qu√© campos nos interesa, y si solo createdAT o tambien updatedAt.
    Indicarle que los nombres de las tablas deben ser en singular, a no ser que deseemos en plural
    Indicarle que la forma que deseamos de los nombres de claves primarias, "idCampo",etc, ya que sequelize solo pone "id"
configuro variables de entorno .env
    - cambio nombres en DB_HOST, DB_NAME y APP_HOST
    - establezco puerto sin usar para la base de datos DB_PORT: 3310

configuro docker-compose.yml

Genero los script de creacion de la Base de datos y poblamiento:
    - chatgpt me crea los script de creacion de la base de datos que coloco en /database como 01-schema.sql
        Indicarle que los nombres de las tablas deben ser en singular y asi coincidan con el modelo sequelize y evitar el lio siguiente:
            Si deseamos las tablas en plural:
                Si el modelo esta en singular y la BD la queremos en plural, hay que a√±adir estas dos lineas a cada archivo sequelize del modelo:
                        ,{tableName: 'Budgets',       // üëà nombre exacto de la tabla en la DB
                        freezeTableName: true}      // üëà evita que Sequelize pluralice "Budget"
        Indicarle que a√±ada la codificacion UTF-8 al final de cada tabla, ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
        Cuando me descargue el archivo que me genera, abrirlo y guardarlo con UTF-8 (CODE, abajo a la derecha icono UTF-8 - Save With Encoding)
    - chatgpt me crea los script de poblamiento de la base de datos que coloco en /database como 02-dummydata.sql
        Indicarle que incluya la linea SET NAMES 'utf8mb4'; en el comienzo del archivo
        Cuando me descargue el archivo que me genera, abrirlo y guardarlo con UTF-8 (CODE, abajo a la derecha icono UTF-8 - Save With Encoding)


Pruebo los scripts en una base de datos local para ver que no genera errores

Crear el diagrama ER con Workbench 
    Eliminar las relaciones que chatgpt haya creado que no me sirvan
    Eliminar los campos que no me sirvan
    generar de nuevo el script de 01-schema.sql y 02-dummydata.sql
    pedirle a chatgpt que me cree el archivo con las nuevas relaciones, para sequelize en formato ES Modules
    eliminar la base de datos y volverla a crear con los nuevos scripts 
    Comprobar que la BD incorpora los nuevos cambios
    Regenerar de nuevo el esquema ER y comprobar que est√° OK

Creo las imagenes de docker y levanto los contenedores con docker compose up --build que procesa el docker-compose.yml

creo la conexion en workbench a la base de datos de docker en el puerto 3310 con el usuario user y password 1234

Compruebo que las bases de datos se han creado y se han poblado


{Solucionado arriba: veo que los acentos se graban como Ana P√É¬©rez y no como Ana P√©rez:
    se guarda como utf8: En VSCODE, parte inferior derecha, pichar en UTF-8 y "save with encoding"
    en la primera linea del SQL de poblamiento a√±adir SET NAMES 'utf8mb4';
    a√±adir al SQL que crea el SCHEMA lo siguiente al final de cada create table: ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;
    hacer down  -v y up --build para reconstruir la base de datos y el contenedor
}

copio de otro proyecto 
    - index.js , hago limpieza para el proyecto actual, quito cors. Solo necesito que funcione la ruta /test

    - ./routes/router.js, hago limpieza para el proyecto actual

http://localhost:3000/test me muestra el mensaje de conexion a la base de datos establecida.


Ahora solo tengo que hacer algunos puntos de API para que devuelva datos:


MIERCOLES 23 abril 2025 16:00h
AuthController
// register, login, logout, getProfile

CategoryController
// GET /categories => lista categor√≠as globales
// GET /categories/id => ver una categoria por id


Usar√© la estructura de API separado de Views de Merk2

Crear carpeta controllers/auth

Copio de Merk2 el authController a /controllers/auth
comentar gestion de errores que aun no implement√© y poner return y el texto en su lugar
Adaptar codigo a la app actual
    reviso nombres de campos, sobre todo user_id a idUser, etc
Examinar dependencias e incorporarlas al proyecto:
    copio bcrypt.js de Merk2 a utils
    cambiar nombre del archivo a bcryptjs.js
    revisar apariciones de bcrypt en el codigo y cambiarlas a bcryptjs (Windows)

Copio de Merk2 el authAPIController a /controllers/auth
comentar gestion de errores que aun no implement√© y poner return y el texto en su lugar
Adaptar codigo a la app actual:
    reviso nombres de campos, sobre todo user_id a idUser, etc
Examinar dependencias e incorporarlas al proyecto:
    copio token.js de MErk2 a Utils

Revisar los router para a√±adir los endpoints:
    Crear la carpeta de routes/api
    Copio router.js de Merk2 a routes
    Copio apiRouter.js de Merk2 a routes/api
    Edito APIRouter.js:
        comento lo que no sirve
        Examino dependencias y las incorporo al proyecto:
            Copio authRouter.js de Merk2 a routes/api
            Compruebo que son dos los endpoints para crear usuarios:
                /api/register y /api/login

instalar Postman Agent
prueba 1 de registro de un usuario
    POST: localhost:3000/api/register JSON:
    {
    "name":"Juan Ramon",
    "email":"juan@gmail.com",
    "password":"1234",
    "isAdmin":0
    }
Result: {"error": "Internal server error"}
{Solucionado arriba: Resulta que los nombres de la base de datos y del modelo sequelize no coincidian, unos estaban
en singular y en la BD en plural, ademas los id no estaban definidos en los modelos sequelize ya
tampoco coincidian. Se iguala todo}

Se logra registrar el primer usuario.

Me voy a por un cafe. 19:08

20:00
pruebo a crear varios usuarios, para tener sus password hasheadas en la BD,
 y una vez creado cambiar su tipo a admin, en la BD.
Creo la condicion para que no se generen admins, poniendo isAdmin=false en la llamada

Defino la variable JWT_SECRET=loQueTuSientesSeLlamaSesion en .env
Comprobar que est√© bien definida en index.js, app.use(session...
Intento de login de un usuario. 
Ya logea bien y registra usuarios
incorporo los hashes de los passwords a los usuarios en el script dummydata.sql para que la proxima vez que 
 haya que reconstruir la imagen se creen con el password encriptado.

Comienzo a hacer el endpoint:
CategoryController
// GET /categories => lista categor√≠as globales

En apiRouter.js:
    router.use("/categories", categoriesRouter);
    import categoriesRouter.js 

creo archivo categoriesRouter.js en carpeta api
copio standRouter y pego 
cambio stand por categories
Elimino los endpoints que no me hacen falta

Creo la carpeta categories en controllers

Copio el archivo de merk2 standAPIController en controllers/categories
Le cambio el nombre a categoriesAPIController
Lo edito, elimino funciones y cambio el stand por categories en todas las apariciones

Copio el archivo de merk2 standController en controllers/categories
Le cambio el nombre a categoriesController
Lo edito, elimino funciones 
cambio standModel por Category
cambio stand por category o categories segun contexto
Comento las importaciones de errores y otros modelos

Creo el middleware que comprueba si esta logeado:
En middlewares copio authMiddleware de merk2
Solo dejo sin comentar la funcion isLoggedInAPI y solo cambio user_id por idUser
encierro en try catch al verifyToken
 } catch (error) {
        console.error("Token verification error:", error.message);
        return res.status(401).json({ error: "Invalid or expired token" });
    }


no hay mas modificaciones, listo para probar el endpoint
Creo un request en Postman http://localhost:3000/api/categories
Me logeo con un usuario, copio su token
voy al request de categories, en headers pongo
 Key: Authorization,
 Value: Bearer ___AQUI__EL__TOKEN____

He tenido que quitar el campo type de Categories:
    1. Lo quito del diagrama E-R en Workbench, guardo
    2. Lo quito del schema de WorkBench
    3. Lo quito del model de sequelize
    4. Lo quito de los scripts 01-schema.sql y 02-dummydata.sql

Ya devuelve las categorias, y categorias por id, 23:30


JUEVES:
12:00 Falta eliminar, listar y editar usuarios
en apiRouter a√±ado la ruta a la edicion de usuarios /user que apunta a userAPIRouter
creo el archivo userAPIRouter para manejar listado, edicion y borrado de usuarios
en userAPIRouter a√±ado las rutas de listado /, /:id/ borrado /:id/remove y edicion /:id/edit

creo la carpeta controllers/user
creo userController.js que contiene las llamadas a sequelize getAll, getByID, edit, y remove
creo userAPIController.js que gestiona las llamadas a traves de API de lo anterior
creo la funcion isAdmin en authMiddleware y lo a√±ado al userAPIRouter:
        router.get("/:id", isLoggedInAPI, isAdmin, userAPIController.getByID);
en cada entrada que deba ser realizada solo por administradores.

Pruebas de listado y borrado de usuarios correcta
Se comprueba ademas que los CASCADE funcionan, al borrar un usuario tambien borra sus Budgets, Goals y Transactions


TransactionController
// POST /transaction => lista todas las transacciones del usuario
// POST /transaction/getCatAndDate => movimientos de una categoria en un rango de fechas

Se copian los controladores API y no API y se cambian los nombres
se le borran los metodos que no interesan
el idUser que deben usar lo deben tomar del middleware isLoggedInAPI que se lo pasa por req

Se activan los errores y el archivo de errores de merk2 se copia y se edita
Se crean los endpoint transaction y getCatAndDate, controllers y routers
23:19 no puedo mas

Extra API endpoint √∫til
GET /dashboard
// Devuelve:
// - ingresos/egresos del mes actual
// - balance
// - presupuestos activos y si est√°n pasados
// - progreso en metas


VIERNES:
11:00
Gestion de errores en todo lo hecho y en lo que queda
A√±adimos express-validator a la imagen para validar el email y otras cosas
A√±adimos el cookies-parser para manejar los tokens con cookies y hacer una blacklist, mas adelante si sucede



BudgetController
// GET /budgets => todos los presupuestos del usuario
// POST /budgets => crear presupuesto para categor√≠a/mes
// PUT /budgets/:id => actualizar presupuesto
// DELETE /budgets/:id => eliminar presupuesto

GoalController
// GET /goals => metas del usuario
// POST /goals => crear meta
// PUT /goals/:id => actualizar progreso
// DELETE /goals/:id => eliminar meta


-------------------------------
Creacion del cliente con REACT
-------------------------------

situados en la rama main
Pasar toda la carpeta del backend a /server excepto:
    .env
    /ignore
    .git
    /node_modules

crear carpeta client
en carpeta client instalar vite y react
	npm create vite@latest
        elegir . para el nombre del proyecto y que no nos cree una carpeta adicional dentro de client
        elegir react
        elegir Javascript + SWC
        hacer npm install
        hacer npm run dev (opcional)
subir los cambios 
    git status (comprobar que estamos en main)
    git add .
    git commit -am "separacion cliente y servidor"
    git push
crear rama nueva para client
    git checkout -b dev/front
npm run dev para comprobar que vite + react estan instalados
comprobar que los endpoints funcionan en localhost:3000/endpoint
